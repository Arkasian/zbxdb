# vim: syntax=sql
[auto_discovery_60]
minutes: 60
db.lld: SELECT SCHEMA_NAME as "{#PDB}" FROM INFORMATION_SCHEMA.SCHEMATA

parm.lld: SELECT concat(@@basedir,':',@@port) as "{#INST_NAME}", variable_name "{#PARAMETER}"
          FROM performance_schema.global_variables
          WHERE variable_value REGEXP '^[0-9]+$'

inst.lld: select concat(@@basedir,':',@@port) as "{#INST_NAME}"

service.lld: SELECT d.schema_name "{#PDB}", '' "{#INST_NAME}", 
             d.schema_name "{#SERVICE_NAME}"
             FROM information_schema.schemata d

[checks_01m]
minutes: 1
inst.uptime: select concat('inst[',concat(@@basedir,':',@@port),',uptime]'), variable_value
             from performance_schema.global_status
             where variable_name = 'Uptime'
db.openmode: select concat('db[',schema_name,',openstatus]'),
            case when variable_value = 'OFF' then 3
            else 2
            end
            from performance_schema.global_variables,
            information_schema.schemata
            where variable_name = 'read_only'

scn: select   'db[current_scn]', cast(json_extract(local,'$.binary_log_position') + (left(right(json_extract(local,'$.binary_log_file'),7),6)<<32) as unsigned) as loc  
           from performance_schema.log_status
     union all
     select 'db[delta_scn]', cast(json_extract(local,'$.binary_log_position') + (left(right(json_extract(local,'$.binary_log_file'),7),6)<<32) as unsigned) as loc
           from performance_schema.log_status

[checks_05m]
minutes: 5
parm.val: select concat('parm[',@@basedir,':',@@port,',',c.variable_name,',value]') as kkey, c.variable_value
          FROM performance_schema.global_variables c
          WHERE variable_value REGEXP '^[0-9]+$'

service.cnt: SELECT concat('service[',db,',,,sess]'), count(*)
        FROM information_schema.processlist
        where not db is null
        GROUP BY db

[checks_60m]
minutes: 60
[checks_720m]
minutes: 720
version: select concat('inst[',@@basedir,':',@@port,',version]'), left(version(),locate('.',version())-1)
