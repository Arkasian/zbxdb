# vim: syntax=sql
[auto_discovery_60]
minutes: 60
inst.lld: select p.setting||':'|| d.setting "{#INST_NAME}"
          from pg_settings p, pg_settings d
          where p.name = 'port'
          and   d.name = 'data_directory'

db.lld: SELECT datname "{#PDB}" FROM pg_database
        WHERE datistemplate = false
parm.lld: select p.setting||':'|| d.setting "{#INST_NAME}", s.name "{#PARAMETER}"
          from pg_settings s
          , pg_settings p, pg_settings d
          where p.name = 'port'
          and   d.name = 'data_directory'
          and s.vartype in ('bool','integer','real')

p_ts.lld: select db.datname "{#PDB}", coalesce(ts.spcname,'pg_default') "{#TS_NAME}"
          from pg_database db
          join pg_authid id on (db.datdba = id.oid)
          left join pg_tablespace ts on (ts.spcowner = id.oid)
          where db.datistemplate = 'false'

[checks_01m]
minutes: 1
inst.uptime: select '[inst['||iname||',uptime]', 
            extract(epoch from current_timestamp - pg_postmaster_start_time())::numeric::integer as uptime
            from (select p.setting||':'|| d.setting iname
                      from pg_settings p, pg_settings d
                      where p.name = 'port'
                      and   d.name = 'data_directory') i

[checks_05m]
minutes: 5
parm.val: select 'parm['||i.iname||','|| s.name ||',value]',
            case when s.setting = 'off' then '0'
                 when s.setting = 'on'  then '1'
                 else s.setting
            end setting
            from pg_settings s, (select p.setting||':'|| d.setting iname
                                  from pg_settings p, pg_settings d
                                  where p.name = 'port'
                                  and   d.name = 'data_directory') i
            where s.vartype in ('bool','integer','real')
